/*
 * Copyright (C) 2017 Christian Hagau <ach@hagau.se>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.sufficientlysecure.keychain.ssh.signature;

import org.bouncycastle.bcpg.PublicKeyAlgorithmTags;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.sufficientlysecure.keychain.KeychainTestRunner;


@RunWith(KeychainTestRunner.class)
public class SshSignatureConverterTest {

    private final static String sCurveOidNistP256 = "1.2.840.10045.3.1.7";

    private final static int[] sRawEcDsaSignatureInt = {
            0x30, 0x46,
            0x02, 0x21,
            0x00, 0x94, 0x9f, 0xa9, 0x15, 0x1d, 0x71, 0x49, 0x5d, 0x9c, 0x02, 0x06, 0x35, 0xdc, 0xed, 0xac, 0x6a,
            0x86, 0x65, 0xd0, 0x79, 0xb4, 0xf7, 0x21, 0xb0, 0x5a, 0x94, 0x08, 0x77, 0x1e, 0x45, 0x5f, 0xe2,
            0x02, 0x21,
            0x00, 0xdf, 0x9c, 0x7a, 0x5a, 0xe5, 0x9e, 0x5d, 0x2e, 0x42, 0xd3, 0x76, 0x7e, 0x15, 0x25, 0xc8, 0x25,
            0x7c, 0xff, 0x82, 0xac, 0x26, 0x64, 0xb6, 0x41, 0x9f, 0xf6, 0x6f, 0x6e, 0x8b, 0x96, 0x69, 0xa0
    };

    private final static int[] sSshEcDsaSignatureInt = {
            0x00, 0x00, 0x00, 0x13,
            0x65, 0x63, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x32,
            0x35, 0x36,
            0x00, 0x00, 0x00, 0x4a,
            0x00, 0x00, 0x00, 0x21,
            0x00, 0x94, 0x9f, 0xa9, 0x15, 0x1d, 0x71, 0x49, 0x5d, 0x9c, 0x02, 0x06, 0x35, 0xdc, 0xed, 0xac, 0x6a,
            0x86, 0x65, 0xd0, 0x79, 0xb4, 0xf7, 0x21, 0xb0, 0x5a, 0x94, 0x08, 0x77, 0x1e, 0x45, 0x5f, 0xe2,
            0x00, 0x00, 0x00, 0x21,
            0x00, 0xdf, 0x9c, 0x7a, 0x5a, 0xe5, 0x9e, 0x5d, 0x2e, 0x42, 0xd3, 0x76, 0x7e, 0x15, 0x25, 0xc8, 0x25,
            0x7c, 0xff, 0x82, 0xac, 0x26, 0x64, 0xb6, 0x41, 0x9f, 0xf6, 0x6f, 0x6e, 0x8b, 0x96, 0x69, 0xa0
    };

    private final static int[] sRawRsaSignatureInt = {
            0x1c, 0x97, 0x5c, 0x37, 0xa4, 0x13, 0x7e, 0x9c, 0x86, 0x1d, 0x20, 0xd9, 0xd4, 0x0b, 0x6d, 0xb1, 0x6d,
            0x1d, 0xa8, 0xb1, 0x7e, 0x36, 0x03, 0x11, 0xb6, 0xa4, 0xeb, 0xcb, 0x3f, 0x1f, 0xf5, 0x1d, 0x49, 0x06,
            0x28, 0xb8, 0x0d, 0xe0, 0xde, 0xce, 0x08, 0xa1, 0xb5, 0xeb, 0xe8, 0xa5, 0x89, 0x4e, 0xa2, 0xfe, 0xa7,
            0x40, 0x74, 0x1e, 0x7c, 0x83, 0xc2, 0x41, 0xa0, 0xd2, 0xbd, 0x9b, 0xdb, 0x3a, 0x2f, 0x39, 0x42, 0xca,
            0xe8, 0xcc, 0xc3, 0xbd, 0xa7, 0xa1, 0x7b, 0x40, 0xb0, 0x0a, 0x0e, 0x21, 0x4a, 0x5d, 0xa7, 0x65, 0x42,
            0x11, 0xf5, 0xfc, 0x49, 0xb4, 0x5d, 0x16, 0xb1, 0xe4, 0x6f, 0xa8, 0x0c, 0xe7, 0x77, 0x96, 0x9c, 0x51,
            0x9f, 0x09, 0xbb, 0x45, 0xe3, 0x12, 0xe4, 0x10, 0x9b, 0x3a, 0xf0, 0xc3, 0x13, 0x3f, 0xfa, 0x22, 0x1d,
            0xa9, 0xe3, 0xc9, 0xe0, 0x3f, 0xa2, 0xfd, 0xb7, 0x0d, 0xf0, 0x3e, 0x6c, 0x83, 0xee, 0x71, 0xf1, 0x06,
            0xb8, 0xf2, 0x4f, 0xd7, 0x2b, 0xad, 0x5e, 0x4e, 0x68, 0x12, 0x3d, 0xda, 0x65, 0x6d, 0xdb, 0xa8, 0xee,
            0x11, 0xf9, 0x10, 0x61, 0x54, 0xd1, 0xe1, 0x37, 0x0b, 0xff, 0x3b, 0xa2, 0x2e, 0x3c, 0x25, 0xb7, 0xd9,
            0x33, 0x4d, 0x90, 0x3e, 0x4d, 0xd7, 0x9a, 0x73, 0x89, 0xda, 0x41, 0xe9, 0x43, 0x7e, 0x79, 0xdd, 0xd8,
            0xa3, 0x33, 0x5d, 0x2c, 0x21, 0x7f, 0x01, 0x05, 0x9b, 0xde, 0x2f, 0x34, 0x50, 0xf8, 0x93, 0x3f, 0x38,
            0xbe, 0x10, 0xcd, 0x59, 0x46, 0x7e, 0x9c, 0x93, 0x32, 0xc7, 0x79, 0x4c, 0xcb, 0x9d, 0x19, 0xcb, 0x65,
            0xa1, 0x79, 0xb0, 0x16, 0x6c, 0xd0, 0xe5, 0x83, 0xe1, 0x7f, 0x8f, 0x31, 0x22, 0x22, 0x25, 0x9a, 0xe3,
            0x1b, 0x13, 0xe6, 0x1f, 0xca, 0xe4, 0xda, 0x5c, 0x55, 0x54, 0xe2, 0x35, 0x52, 0x18, 0xa0, 0xeb, 0x07,
            0x19
    };

    private final static int[] sSshRsaSignatureInt = {
            0x00, 0x00, 0x00, 0x07,
            0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61,
            0x00, 0x00, 0x01, 0x00,
            0x1c, 0x97, 0x5c, 0x37, 0xa4, 0x13, 0x7e, 0x9c, 0x86, 0x1d, 0x20, 0xd9, 0xd4, 0x0b, 0x6d, 0xb1, 0x6d,
            0x1d, 0xa8, 0xb1, 0x7e, 0x36, 0x03, 0x11, 0xb6, 0xa4, 0xeb, 0xcb, 0x3f, 0x1f, 0xf5, 0x1d, 0x49, 0x06,
            0x28, 0xb8, 0x0d, 0xe0, 0xde, 0xce, 0x08, 0xa1, 0xb5, 0xeb, 0xe8, 0xa5, 0x89, 0x4e, 0xa2, 0xfe, 0xa7,
            0x40, 0x74, 0x1e, 0x7c, 0x83, 0xc2, 0x41, 0xa0, 0xd2, 0xbd, 0x9b, 0xdb, 0x3a, 0x2f, 0x39, 0x42, 0xca,
            0xe8, 0xcc, 0xc3, 0xbd, 0xa7, 0xa1, 0x7b, 0x40, 0xb0, 0x0a, 0x0e, 0x21, 0x4a, 0x5d, 0xa7, 0x65, 0x42,
            0x11, 0xf5, 0xfc, 0x49, 0xb4, 0x5d, 0x16, 0xb1, 0xe4, 0x6f, 0xa8, 0x0c, 0xe7, 0x77, 0x96, 0x9c, 0x51,
            0x9f, 0x09, 0xbb, 0x45, 0xe3, 0x12, 0xe4, 0x10, 0x9b, 0x3a, 0xf0, 0xc3, 0x13, 0x3f, 0xfa, 0x22, 0x1d,
            0xa9, 0xe3, 0xc9, 0xe0, 0x3f, 0xa2, 0xfd, 0xb7, 0x0d, 0xf0, 0x3e, 0x6c, 0x83, 0xee, 0x71, 0xf1, 0x06,
            0xb8, 0xf2, 0x4f, 0xd7, 0x2b, 0xad, 0x5e, 0x4e, 0x68, 0x12, 0x3d, 0xda, 0x65, 0x6d, 0xdb, 0xa8, 0xee,
            0x11, 0xf9, 0x10, 0x61, 0x54, 0xd1, 0xe1, 0x37, 0x0b, 0xff, 0x3b, 0xa2, 0x2e, 0x3c, 0x25, 0xb7, 0xd9,
            0x33, 0x4d, 0x90, 0x3e, 0x4d, 0xd7, 0x9a, 0x73, 0x89, 0xda, 0x41, 0xe9, 0x43, 0x7e, 0x79, 0xdd, 0xd8,
            0xa3, 0x33, 0x5d, 0x2c, 0x21, 0x7f, 0x01, 0x05, 0x9b, 0xde, 0x2f, 0x34, 0x50, 0xf8, 0x93, 0x3f, 0x38,
            0xbe, 0x10, 0xcd, 0x59, 0x46, 0x7e, 0x9c, 0x93, 0x32, 0xc7, 0x79, 0x4c, 0xcb, 0x9d, 0x19, 0xcb, 0x65,
            0xa1, 0x79, 0xb0, 0x16, 0x6c, 0xd0, 0xe5, 0x83, 0xe1, 0x7f, 0x8f, 0x31, 0x22, 0x22, 0x25, 0x9a, 0xe3,
            0x1b, 0x13, 0xe6, 0x1f, 0xca, 0xe4, 0xda, 0x5c, 0x55, 0x54, 0xe2, 0x35, 0x52, 0x18, 0xa0, 0xeb, 0x07,
            0x19
    };

    private final static int[] sRawEdDsaSignatureInt = {
            0x55, 0x49, 0x46, 0xe8, 0x27, 0xc6, 0xfd, 0x4b, 0x21, 0xb7, 0xa8, 0x1a, 0x97, 0x7a, 0x74, 0x53, 0x31,
            0x0e, 0x18, 0xc0, 0x05, 0x40, 0x3b, 0xfa, 0x4d, 0xdd, 0x87, 0x15, 0x8b, 0x56, 0xb1, 0x40, 0xfd, 0x61,
            0x0b, 0xf1, 0x5d, 0x7f, 0x38, 0xa3, 0x2b, 0x55, 0x71, 0x3f, 0xd3, 0x80, 0x87, 0xac, 0x86, 0x12, 0xdc,
            0x14, 0x56, 0xce, 0xc3, 0x15, 0xe4, 0x64, 0x3b, 0x6d, 0x24, 0x89, 0x07, 0x0a
    };

    private final static int[] sSshEdDsaSignatureInt = {
            0x00, 0x00, 0x00, 0x0b,
            0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
            0x00, 0x00, 0x00, 0x40,
            0x55, 0x49, 0x46, 0xe8, 0x27, 0xc6, 0xfd, 0x4b, 0x21, 0xb7, 0xa8, 0x1a, 0x97, 0x7a, 0x74, 0x53, 0x31,
            0x0e, 0x18, 0xc0, 0x05, 0x40, 0x3b, 0xfa, 0x4d, 0xdd, 0x87, 0x15, 0x8b, 0x56, 0xb1, 0x40, 0xfd, 0x61,
            0x0b, 0xf1, 0x5d, 0x7f, 0x38, 0xa3, 0x2b, 0x55, 0x71, 0x3f, 0xd3, 0x80, 0x87, 0xac, 0x86, 0x12, 0xdc,
            0x14, 0x56, 0xce, 0xc3, 0x15, 0xe4, 0x64, 0x3b, 0x6d, 0x24, 0x89, 0x07, 0x0a
    };

    private final static int[] sRawDsaSignatureInt = {
            0x30, 0x46,
            0x02, 0x21,
            0x00, 0xde, 0xfd, 0xb8, 0xa2, 0x5f, 0xb8, 0x66, 0x0a, 0x3c, 0xab, 0x24, 0x51, 0x0a, 0x20, 0x0a, 0x01,
            0x3e, 0xb9, 0xc6, 0x77, 0xe4, 0xca, 0xed, 0x19, 0xa3, 0x49, 0xa9, 0xaf, 0x3b, 0x8c, 0x97, 0x1a,
            0x02, 0x21,
            0x00, 0xe7, 0xe4, 0xd5, 0xb8, 0xf0, 0x8a, 0xb5, 0xcb, 0x4d, 0x44, 0x5f, 0x03, 0xc4, 0x58, 0xcc, 0xce,
            0x3d, 0xff, 0x26, 0xa2, 0x0f, 0xb3, 0x14, 0x50, 0x86, 0x04, 0xd1, 0xca, 0x3e, 0x2c, 0x91, 0x25
    };

    private final static int[] sSshDsaSignatureInt = {
            0x00, 0x00, 0x00, 0x07,
            0x73, 0x73, 0x68, 0x2d, 0x64, 0x73, 0x73,
            0x00, 0x00, 0x00, 0x40,
            0xde, 0xfd, 0xb8, 0xa2, 0x5f, 0xb8, 0x66, 0x0a, 0x3c, 0xab, 0x24, 0x51, 0x0a, 0x20, 0x0a, 0x01, 0x3e,
            0xb9, 0xc6, 0x77, 0xe4, 0xca, 0xed, 0x19, 0xa3, 0x49, 0xa9, 0xaf, 0x3b, 0x8c, 0x97, 0x1a, 0xe7, 0xe4,
            0xd5, 0xb8, 0xf0, 0x8a, 0xb5, 0xcb, 0x4d, 0x44, 0x5f, 0x03, 0xc4, 0x58, 0xcc, 0xce, 0x3d, 0xff, 0x26,
            0xa2, 0x0f, 0xb3, 0x14, 0x50, 0x86, 0x04, 0xd1, 0xca, 0x3e, 0x2c, 0x91, 0x25
    };

    @Test
    public void testEcDsa() throws Exception {
        byte[] rawEcDsaSignature = convertArray(sRawEcDsaSignatureInt);
        byte[] sshEcDsaSignature = convertArray(sSshEcDsaSignatureInt);

        byte[] out = SshSignatureConverter.getSshSignatureEcDsa(rawEcDsaSignature, sCurveOidNistP256);

        Assert.assertArrayEquals("Signature blobs must be equal", sshEcDsaSignature, out);
    }

    @Test
    public void testRsa() throws Exception {
        byte[] rawRsaSignature = convertArray(sRawRsaSignatureInt);
        byte[] sshRsaSignature = convertArray(sSshRsaSignatureInt);

        byte[] out = SshSignatureConverter.getSshSignature(rawRsaSignature, PublicKeyAlgorithmTags.RSA_SIGN);

        Assert.assertArrayEquals("Signature blobs must be equal", sshRsaSignature, out);
    }

    @Test
    public void testEdDsa() throws Exception {
        byte[] rawEdDsaSignature = convertArray(sRawEdDsaSignatureInt);
        byte[] sshEdDsaSignature = convertArray(sSshEdDsaSignatureInt);

        byte[] out = SshSignatureConverter.getSshSignature(rawEdDsaSignature, PublicKeyAlgorithmTags.EDDSA);

        Assert.assertArrayEquals("Signature blobs must be equal", sshEdDsaSignature, out);
    }

    @Test
    public void testDsa() throws Exception {
        byte[] rawDsaSignature = convertArray(sRawDsaSignatureInt);
        byte[] sshDsaSignature = convertArray(sSshDsaSignatureInt);

        byte[] out = SshSignatureConverter.getSshSignature(rawDsaSignature, PublicKeyAlgorithmTags.DSA);

        Assert.assertArrayEquals("Signature blobs must be equal", sshDsaSignature, out);
    }

    private byte[] convertArray(int[] array) {
        byte[] out = new byte[array.length];
        for (int i = 0; i < array.length; i++) {
            out[i] = (byte) array[i];
        }
        return out;
    }
}
